import{sql as a}from"kysely";import{ExpressionWrapper as h,sql as y,ValueNode as E}from"kysely";import*as S from"wkx";import{isGeometryObject as d}from"geojson-validation";function s(e){return Object.assign({},u,e)}function D(e){return e==null}function x(e){return typeof e=="string"}function G(e){return e?.isRawBuilder??!1}function P(e){return e instanceof h}function T(e){try{let o=x(e)?d(JSON.parse(e),!0):d(e,!0);if(o.length>0)throw new Error("Invalid GeoJSON geometry",{cause:o})}catch(o){throw new Error("Invalid GeoJSON geometry",{cause:o})}}function k(e){try{if(!S.Geometry.parse(e))throw new Error("Invalid WKT")}catch(o){throw new Error("Invalid WKT",{cause:o})}}function W(e,o={}){let r=s(o);if(x(e)||G(e))return!1;if(P(e)){let t=e.toOperationNode();return E.is(t)?(r.validate&&T(t.value),!0):!1}return r.validate&&T(e),!0}function i(e,o,r={}){return W(o,r)?m(e,o,r):o}function O(e,o={}){let r=s(o);if(x(e)||G(e))return e;if(P(e)){let t=e.toOperationNode();return E.is(t)&&r.validate&&T(t.value),e}return r.validate&&T(e),y.val(JSON.stringify(e))}function R(e,o={}){return s(o).validate&&k(e),y.val(e)}function B(e,o,r,t){return e.fn(o,[...r,...t.additionalParameters])}function f(e,o,r,t,n=[],p={}){let l=s(p);return B(e,o,[i(e,r,l),i(e,t,l),...n],l)}function g(e,o,r={}){let t=s(r),n=D(r.options)?[]:[a.val(r.options)],p=n.length>0||!D(r.maxDecimalDigits)?[a.val(t.maxDecimalDigits??9)]:[];return B(e,"ST_AsGeoJSON",[o,...p,...n],t)}function m(e,o,r={}){let t=s(r),n=O(o,t);return B(e,"ST_GeomFromGeoJSON",[n],t)}function _(e,o,r={}){let t=s(r),n=R(o,t);return B(e,"ST_GeomFromText",[n,...D(t.srid)?[]:[a.val(t.srid)]],t)}function v(e,o,r={}){let t=s(r);return B(e,"ST_Area",[i(e,o,t),...D(t.useSpheroid)?[]:[a.val(t.useSpheroid)]],t)}function C(e,o){return e.fn("ST_AsText",[o])}function N(e,o,r={}){let t=s(r);return B(e,"ST_Boundary",[i(e,o,t)],t)}function w(e,o,r,t={}){let n=s(t);return B(e,"ST_Buffer",[i(e,o,n),a.val(r)],n)}function J(e,o,r={}){let t=s(r);return B(e,"ST_Centroid",[i(e,o,t)],t)}function I(e,o,r,t={}){return f(e,"ST_Contains",o,r,[],t)}function F(e,o,r,t={}){return f(e,"ST_Covers",o,r,[],t)}function V(e,o,r,t={}){return f(e,"ST_Crosses",o,r,[],t)}function A(e,o,r,t,n={}){return f(e,"ST_DWithin",o,r,[a.val(t)],n)}function j(e,o,r,t={}){let n=s(t);return B(e,"ST_Difference",[i(e,o,n),i(e,r,n)],n)}function q(e,o,r,t={}){return f(e,"ST_Disjoint",o,r,[],t)}function z(e,o,r,t={}){let n=s(t);return B(e,"ST_Distance",[i(e,o,n),i(e,r,n)],n)}function M(e,o,r,t={}){let n=s(t);return B(e,"ST_DistanceSphere",[i(e,o,n),i(e,r,n)],n)}function K(e,o,r,t={}){return f(e,"ST_Equals",o,r,[],t)}function H(e,o,r,t={}){let n=s(t);return B(e,"ST_Expand",[i(e,o,n),a.val(r)],n)}function $(e,o,r={}){let t=s(r);return B(e,"ST_GeoHash",[i(e,o,t)],t)}function U(e,o,r,t={}){let n=s(t);return B(e,"ST_Intersection",[i(e,o,n),i(e,r,n)],n)}function X(e,o,r,t={}){return f(e,"ST_Intersects",o,r,[],t)}function Y(e,o,r={}){let t=s(r);return B(e,"ST_IsValid",[i(e,o,t)],t)}function Z(e,o,r={}){let t=s(r);return B(e,"ST_MakeValid",[i(e,o,t)],t)}function L(e,o,r,t={}){let n=s(t);return B(e,"ST_MaxDistance",[i(e,o,n),i(e,r,n)],n)}function Q(e,o,r,t={}){return f(e,"ST_Overlaps",o,r,[],t)}function b(e,o,r={}){let t=s(r);return B(e,"ST_SRID",[i(e,o,t)],t)}function ee(e,o,r,t,n={}){let p=s(n);return B(e,"ST_Scale",[i(e,o,p),a.val(r),a.val(t)],p)}function oe(e,o,r,t={}){let n=s(t);return B(e,"ST_Segmentize",[i(e,o,n),a.val(r)],n)}function te(e,o,r,t={}){let n=s(t);return B(e,"ST_SetSRID",[i(e,o,n),a.val(r)],n)}function re(e,o,r,t={}){let n=s(t);return B(e,"ST_Simplify",[i(e,o,n),a.val(r)],n)}function ne(e,o,r,t={}){let n=s(t);return B(e,"ST_SimplifyPreserveTopology",[i(e,o,n),a.val(r)],n)}function ie(e,o,r,t={}){let n=s(t);return B(e,"ST_Transform",[i(e,o,n),a.raw(`${parseInt(`${r}`)}::int`)],n)}function se(e,o,r,t,n={}){let p=s(n);return B(e,"ST_Translate",[i(e,o,p),a.val(r),a.val(t)],p)}function Be(e,o,r,t={}){let n=s(t);return B(e,"ST_Union",[i(e,o,n),...r?[i(e,r,n)]:[]],n)}function ae(e,o,r,t={}){return f(e,"ST_Within",o,r,[],t)}function pe(e,o,r={}){let t=s(r);return B(e,"ST_X",[i(e,o,t)],t)}function fe(e,o,r={}){let t=s(r);return B(e,"ST_Y",[i(e,o,t)],t)}function le(e,o,r={}){let t=s(r);return B(e,"ST_Z",[i(e,o,t)],t)}function De(e,o,r={}){let t=s(r);return B(e,"ST_M",[i(e,o,t)],t)}function Te(e,o,r,t,n,p={}){let l=s(p),c=[a.val(o),a.val(r)];return t!==void 0&&c.push(a.val(t)),n!==void 0&&c.push(a.val(n)),B(e,"ST_MakePoint",c,l)}function ke(e){return{asGeoJSON:(...o)=>g(e,...o),geomFromGeoJSON:(...o)=>m(e,...o),geomFromText:(...o)=>_(e,...o),area:(...o)=>v(e,...o),asText:(...o)=>C(e,...o),boundary:(...o)=>N(e,...o),buffer:(...o)=>w(e,...o),centroid:(...o)=>J(e,...o),contains:(...o)=>I(e,...o),covers:(...o)=>F(e,...o),crosses:(...o)=>V(e,...o),dWithin:(...o)=>A(e,...o),difference:(...o)=>j(e,...o),disjoint:(...o)=>q(e,...o),distance:(...o)=>z(e,...o),distanceSphere:(...o)=>M(e,...o),equals:(...o)=>K(e,...o),expand:(...o)=>H(e,...o),geoHash:(...o)=>$(e,...o),intersection:(...o)=>U(e,...o),intersects:(...o)=>X(e,...o),isValid:(...o)=>Y(e,...o),makeValid:(...o)=>Z(e,...o),maxDistance:(...o)=>L(e,...o),overlaps:(...o)=>Q(e,...o),srid:(...o)=>b(e,...o),scale:(...o)=>ee(e,...o),segmentize:(...o)=>oe(e,...o),setSRID:(...o)=>te(e,...o),simplify:(...o)=>re(e,...o),simplifyPreserveTopology:(...o)=>ne(e,...o),transform:(...o)=>ie(e,...o),translate:(...o)=>se(e,...o),union:(...o)=>Be(e,...o),within:(...o)=>ae(e,...o),x:(...o)=>pe(e,...o),y:(...o)=>fe(e,...o),z:(...o)=>le(e,...o),m:(...o)=>De(e,...o),makePoint:(...o)=>Te(e,...o)}}var u={validate:!0,additionalParameters:[]};function ge(e){u={...u,...e}}export{v as area,g as asGeoJSON,C as asText,N as boundary,w as buffer,J as centroid,I as contains,F as covers,V as crosses,A as dWithin,u as defaultOptions,j as difference,q as disjoint,z as distance,M as distanceSphere,K as equals,H as expand,$ as geoHash,m as geomFromGeoJSON,_ as geomFromText,U as intersection,X as intersects,Y as isValid,De as m,Te as makePoint,Z as makeValid,L as maxDistance,Q as overlaps,ee as scale,oe as segmentize,ge as setDefaultOptions,te as setSRID,re as simplify,ne as simplifyPreserveTopology,b as srid,ke as stf,ie as transform,se as translate,Be as union,ae as within,pe as x,fe as y,le as z};
