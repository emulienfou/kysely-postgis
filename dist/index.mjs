import{sql as a}from"kysely";import{ExpressionWrapper as R,sql as y,ValueNode as d}from"kysely";import*as E from"wkx";import{isGeometryObject as m}from"geojson-validation";function s(e){return Object.assign({},T,e)}function f(e){return e==null}function c(e){return typeof e=="string"}function S(e){return e?.isRawBuilder??!1}function G(e){return e instanceof R}function D(e){try{let o=c(e)?m(JSON.parse(e),!0):m(e,!0);if(o.length>0)throw new Error("Invalid GeoJSON geometry",{cause:o})}catch(o){throw new Error("Invalid GeoJSON geometry",{cause:o})}}function h(e){try{if(!E.Geometry.parse(e))throw new Error("Invalid WKT")}catch(o){throw new Error("Invalid WKT",{cause:o})}}function k(e,o={}){let r=s(o);if(c(e)||S(e))return!1;if(G(e)){let t=e.toOperationNode();return d.is(t)?(r.validate&&D(t.value),!0):!1}return r.validate&&D(e),!0}function i(e,o,r={}){return k(o,r)?x(e,o,r):o}function P(e,o={}){let r=s(o);if(c(e)||S(e))return e;if(G(e)){let t=e.toOperationNode();return d.is(t)&&r.validate&&D(t.value),e}return r.validate&&D(e),y.val(JSON.stringify(e))}function O(e,o={}){return s(o).validate&&h(e),y.val(e)}function B(e,o,r,t){return e.fn(o,[...r,...t.additionalParameters])}function p(e,o,r,t,n=[],l={}){let u=s(l);return B(e,o,[i(e,r,u),i(e,t,u),...n],u)}function W(e,o,r={}){let t=s(r),n=f(r.options)?[]:[a.val(r.options)],l=n.length>0||!f(r.maxDecimalDigits)?[a.val(t.maxDecimalDigits??9)]:[];return B(e,"ST_AsGeoJSON",[o,...l,...n],t)}function x(e,o,r={}){let t=s(r),n=P(o,t);return B(e,"ST_GeomFromGeoJSON",[n],t)}function g(e,o,r={}){let t=s(r),n=O(o,t);return B(e,"ST_GeomFromText",[n,...f(t.srid)?[]:[a.val(t.srid)]],t)}function _(e,o,r={}){let t=s(r);return B(e,"ST_Area",[i(e,o,t),...f(t.useSpheroid)?[]:[a.val(t.useSpheroid)]],t)}function v(e,o){return e.fn("ST_AsText",[o])}function C(e,o,r={}){let t=s(r);return B(e,"ST_Boundary",[i(e,o,t)],t)}function N(e,o,r,t={}){let n=s(t);return B(e,"ST_Buffer",[i(e,o,n),a.val(r)],n)}function w(e,o,r={}){let t=s(r);return B(e,"ST_Centroid",[i(e,o,t)],t)}function J(e,o,r,t={}){return p(e,"ST_Contains",o,r,[],t)}function I(e,o,r,t={}){return p(e,"ST_Covers",o,r,[],t)}function F(e,o,r,t={}){return p(e,"ST_Crosses",o,r,[],t)}function V(e,o,r,t,n={}){return p(e,"ST_DWithin",o,r,[a.val(t)],n)}function A(e,o,r,t={}){let n=s(t);return B(e,"ST_Difference",[i(e,o,n),i(e,r,n)],n)}function j(e,o,r,t={}){return p(e,"ST_Disjoint",o,r,[],t)}function z(e,o,r,t={}){let n=s(t);return B(e,"ST_Distance",[i(e,o,n),i(e,r,n)],n)}function q(e,o,r,t={}){let n=s(t);return B(e,"ST_DistanceSphere",[i(e,o,n),i(e,r,n)],n)}function K(e,o,r,t={}){return p(e,"ST_Equals",o,r,[],t)}function M(e,o,r,t={}){let n=s(t);return B(e,"ST_Expand",[i(e,o,n),a.val(r)],n)}function H(e,o,r={}){let t=s(r);return B(e,"ST_GeoHash",[i(e,o,t)],t)}function $(e,o,r,t={}){let n=s(t);return B(e,"ST_Intersection",[i(e,o,n),i(e,r,n)],n)}function U(e,o,r,t={}){return p(e,"ST_Intersects",o,r,[],t)}function X(e,o,r={}){let t=s(r);return B(e,"ST_IsValid",[i(e,o,t)],t)}function Y(e,o,r={}){let t=s(r);return B(e,"ST_MakeValid",[i(e,o,t)],t)}function Z(e,o,r,t={}){let n=s(t);return B(e,"ST_MaxDistance",[i(e,o,n),i(e,r,n)],n)}function L(e,o,r,t={}){return p(e,"ST_Overlaps",o,r,[],t)}function Q(e,o,r={}){let t=s(r);return B(e,"ST_SRID",[i(e,o,t)],t)}function b(e,o,r,t,n={}){let l=s(n);return B(e,"ST_Scale",[i(e,o,l),a.val(r),a.val(t)],l)}function ee(e,o,r,t={}){let n=s(t);return B(e,"ST_Segmentize",[i(e,o,n),a.val(r)],n)}function oe(e,o,r,t={}){let n=s(t);return B(e,"ST_SetSRID",[i(e,o,n),a.val(r)],n)}function te(e,o,r,t={}){let n=s(t);return B(e,"ST_Simplify",[i(e,o,n),a.val(r)],n)}function re(e,o,r,t={}){let n=s(t);return B(e,"ST_SimplifyPreserveTopology",[i(e,o,n),a.val(r)],n)}function ne(e,o,r,t={}){let n=s(t);return B(e,"ST_Transform",[i(e,o,n),a.raw(`${parseInt(`${r}`)}::int`)],n)}function ie(e,o,r,t,n={}){let l=s(n);return B(e,"ST_Translate",[i(e,o,l),a.val(r),a.val(t)],l)}function se(e,o,r,t={}){let n=s(t);return B(e,"ST_Union",[i(e,o,n),...r?[i(e,r,n)]:[]],n)}function Be(e,o,r,t={}){return p(e,"ST_Within",o,r,[],t)}function ae(e,o,r={}){let t=s(r);return B(e,"ST_X",[i(e,o,t)],t)}function pe(e,o,r={}){let t=s(r);return B(e,"ST_Y",[i(e,o,t)],t)}function le(e,o,r={}){let t=s(r);return B(e,"ST_Z",[i(e,o,t)],t)}function fe(e,o,r={}){let t=s(r);return B(e,"ST_M",[i(e,o,t)],t)}function Re(e){return{asGeoJSON:(...o)=>W(e,...o),geomFromGeoJSON:(...o)=>x(e,...o),geomFromText:(...o)=>g(e,...o),area:(...o)=>_(e,...o),asText:(...o)=>v(e,...o),boundary:(...o)=>C(e,...o),buffer:(...o)=>N(e,...o),centroid:(...o)=>w(e,...o),contains:(...o)=>J(e,...o),covers:(...o)=>I(e,...o),crosses:(...o)=>F(e,...o),dWithin:(...o)=>V(e,...o),difference:(...o)=>A(e,...o),disjoint:(...o)=>j(e,...o),distance:(...o)=>z(e,...o),distanceSphere:(...o)=>q(e,...o),equals:(...o)=>K(e,...o),expand:(...o)=>M(e,...o),geoHash:(...o)=>H(e,...o),intersection:(...o)=>$(e,...o),intersects:(...o)=>U(e,...o),isValid:(...o)=>X(e,...o),makeValid:(...o)=>Y(e,...o),maxDistance:(...o)=>Z(e,...o),overlaps:(...o)=>L(e,...o),srid:(...o)=>Q(e,...o),scale:(...o)=>b(e,...o),segmentize:(...o)=>ee(e,...o),setSRID:(...o)=>oe(e,...o),simplify:(...o)=>te(e,...o),simplifyPreserveTopology:(...o)=>re(e,...o),transform:(...o)=>ne(e,...o),translate:(...o)=>ie(e,...o),union:(...o)=>se(e,...o),within:(...o)=>Be(e,...o),x:(...o)=>ae(e,...o),y:(...o)=>pe(e,...o),z:(...o)=>le(e,...o),m:(...o)=>fe(e,...o)}}var T={validate:!0,additionalParameters:[]};function ke(e){T={...T,...e}}export{_ as area,W as asGeoJSON,v as asText,C as boundary,N as buffer,w as centroid,J as contains,I as covers,F as crosses,V as dWithin,T as defaultOptions,A as difference,j as disjoint,z as distance,q as distanceSphere,K as equals,M as expand,H as geoHash,x as geomFromGeoJSON,g as geomFromText,$ as intersection,U as intersects,X as isValid,fe as m,Y as makeValid,Z as maxDistance,L as overlaps,b as scale,ee as segmentize,ke as setDefaultOptions,oe as setSRID,te as simplify,re as simplifyPreserveTopology,Q as srid,Re as stf,ne as transform,ie as translate,se as union,Be as within,ae as x,pe as y,le as z};
