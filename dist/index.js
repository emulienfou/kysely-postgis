"use strict";var le=Object.create;var u=Object.defineProperty;var fe=Object.getOwnPropertyDescriptor;var De=Object.getOwnPropertyNames;var Te=Object.getPrototypeOf,ue=Object.prototype.hasOwnProperty;var ce=(e,o)=>{for(var r in o)u(e,r,{get:o[r],enumerable:!0})},E=(e,o,r,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let n of De(o))!ue.call(e,n)&&n!==r&&u(e,n,{get:()=>o[n],enumerable:!(t=fe(o,n))||t.enumerable});return e};var xe=(e,o,r)=>(r=e!=null?le(Te(e)):{},E(o||!e||!e.__esModule?u(r,"default",{value:e,enumerable:!0}):r,e)),me=e=>E(u({},"__esModule",{value:!0}),e);var Ge={};ce(Ge,{area:()=>W,asGeoJSON:()=>h,asText:()=>g,boundary:()=>_,buffer:()=>v,centroid:()=>C,contains:()=>N,covers:()=>w,crosses:()=>J,dWithin:()=>I,defaultOptions:()=>T,difference:()=>F,disjoint:()=>V,distance:()=>A,distanceSphere:()=>j,equals:()=>z,expand:()=>q,geoHash:()=>K,geomFromGeoJSON:()=>x,geomFromText:()=>k,intersection:()=>M,intersects:()=>H,isValid:()=>$,m:()=>pe,makeValid:()=>U,maxDistance:()=>X,overlaps:()=>Y,scale:()=>L,segmentize:()=>Q,setDefaultOptions:()=>Se,setSRID:()=>b,simplify:()=>ee,simplifyPreserveTopology:()=>oe,srid:()=>Z,stf:()=>Ee,transform:()=>te,translate:()=>re,union:()=>ne,within:()=>ie,x:()=>se,y:()=>Be,z:()=>ae});module.exports=me(Ge);var a=require("kysely");var f=require("kysely"),S=xe(require("wkx")),y=require("geojson-validation");function s(e){return Object.assign({},T,e)}function D(e){return e==null}function d(e){return typeof e=="string"}function G(e){return e?.isRawBuilder??!1}function P(e){return e instanceof f.ExpressionWrapper}function c(e){try{let o=d(e)?(0,y.isGeometryObject)(JSON.parse(e),!0):(0,y.isGeometryObject)(e,!0);if(o.length>0)throw new Error("Invalid GeoJSON geometry",{cause:o})}catch(o){throw new Error("Invalid GeoJSON geometry",{cause:o})}}function ye(e){try{if(!S.Geometry.parse(e))throw new Error("Invalid WKT")}catch(o){throw new Error("Invalid WKT",{cause:o})}}function de(e,o={}){let r=s(o);if(d(e)||G(e))return!1;if(P(e)){let t=e.toOperationNode();return f.ValueNode.is(t)?(r.validate&&c(t.value),!0):!1}return r.validate&&c(e),!0}function i(e,o,r={}){return de(o,r)?x(e,o,r):o}function O(e,o={}){let r=s(o);if(d(e)||G(e))return e;if(P(e)){let t=e.toOperationNode();return f.ValueNode.is(t)&&r.validate&&c(t.value),e}return r.validate&&c(e),f.sql.val(JSON.stringify(e))}function R(e,o={}){return s(o).validate&&ye(e),f.sql.val(e)}function B(e,o,r,t){return e.fn(o,[...r,...t.additionalParameters])}function p(e,o,r,t,n=[],l={}){let m=s(l);return B(e,o,[i(e,r,m),i(e,t,m),...n],m)}function h(e,o,r={}){let t=s(r),n=D(r.options)?[]:[a.sql.val(r.options)],l=n.length>0||!D(r.maxDecimalDigits)?[a.sql.val(t.maxDecimalDigits??9)]:[];return B(e,"ST_AsGeoJSON",[o,...l,...n],t)}function x(e,o,r={}){let t=s(r),n=O(o,t);return B(e,"ST_GeomFromGeoJSON",[n],t)}function k(e,o,r={}){let t=s(r),n=R(o,t);return B(e,"ST_GeomFromText",[n,...D(t.srid)?[]:[a.sql.val(t.srid)]],t)}function W(e,o,r={}){let t=s(r);return B(e,"ST_Area",[i(e,o,t),...D(t.useSpheroid)?[]:[a.sql.val(t.useSpheroid)]],t)}function g(e,o){return e.fn("ST_AsText",[o])}function _(e,o,r={}){let t=s(r);return B(e,"ST_Boundary",[i(e,o,t)],t)}function v(e,o,r,t={}){let n=s(t);return B(e,"ST_Buffer",[i(e,o,n),a.sql.val(r)],n)}function C(e,o,r={}){let t=s(r);return B(e,"ST_Centroid",[i(e,o,t)],t)}function N(e,o,r,t={}){return p(e,"ST_Contains",o,r,[],t)}function w(e,o,r,t={}){return p(e,"ST_Covers",o,r,[],t)}function J(e,o,r,t={}){return p(e,"ST_Crosses",o,r,[],t)}function I(e,o,r,t,n={}){return p(e,"ST_DWithin",o,r,[a.sql.val(t)],n)}function F(e,o,r,t={}){let n=s(t);return B(e,"ST_Difference",[i(e,o,n),i(e,r,n)],n)}function V(e,o,r,t={}){return p(e,"ST_Disjoint",o,r,[],t)}function A(e,o,r,t={}){let n=s(t);return B(e,"ST_Distance",[i(e,o,n),i(e,r,n)],n)}function j(e,o,r,t={}){let n=s(t);return B(e,"ST_DistanceSphere",[i(e,o,n),i(e,r,n)],n)}function z(e,o,r,t={}){return p(e,"ST_Equals",o,r,[],t)}function q(e,o,r,t={}){let n=s(t);return B(e,"ST_Expand",[i(e,o,n),a.sql.val(r)],n)}function K(e,o,r={}){let t=s(r);return B(e,"ST_GeoHash",[i(e,o,t)],t)}function M(e,o,r,t={}){let n=s(t);return B(e,"ST_Intersection",[i(e,o,n),i(e,r,n)],n)}function H(e,o,r,t={}){return p(e,"ST_Intersects",o,r,[],t)}function $(e,o,r={}){let t=s(r);return B(e,"ST_IsValid",[i(e,o,t)],t)}function U(e,o,r={}){let t=s(r);return B(e,"ST_MakeValid",[i(e,o,t)],t)}function X(e,o,r,t={}){let n=s(t);return B(e,"ST_MaxDistance",[i(e,o,n),i(e,r,n)],n)}function Y(e,o,r,t={}){return p(e,"ST_Overlaps",o,r,[],t)}function Z(e,o,r={}){let t=s(r);return B(e,"ST_SRID",[i(e,o,t)],t)}function L(e,o,r,t,n={}){let l=s(n);return B(e,"ST_Scale",[i(e,o,l),a.sql.val(r),a.sql.val(t)],l)}function Q(e,o,r,t={}){let n=s(t);return B(e,"ST_Segmentize",[i(e,o,n),a.sql.val(r)],n)}function b(e,o,r,t={}){let n=s(t);return B(e,"ST_SetSRID",[i(e,o,n),a.sql.val(r)],n)}function ee(e,o,r,t={}){let n=s(t);return B(e,"ST_Simplify",[i(e,o,n),a.sql.val(r)],n)}function oe(e,o,r,t={}){let n=s(t);return B(e,"ST_SimplifyPreserveTopology",[i(e,o,n),a.sql.val(r)],n)}function te(e,o,r,t={}){let n=s(t);return B(e,"ST_Transform",[i(e,o,n),a.sql.raw(`${parseInt(`${r}`)}::int`)],n)}function re(e,o,r,t,n={}){let l=s(n);return B(e,"ST_Translate",[i(e,o,l),a.sql.val(r),a.sql.val(t)],l)}function ne(e,o,r,t={}){let n=s(t);return B(e,"ST_Union",[i(e,o,n),...r?[i(e,r,n)]:[]],n)}function ie(e,o,r,t={}){return p(e,"ST_Within",o,r,[],t)}function se(e,o,r={}){let t=s(r);return B(e,"ST_X",[i(e,o,t)],t)}function Be(e,o,r={}){let t=s(r);return B(e,"ST_Y",[i(e,o,t)],t)}function ae(e,o,r={}){let t=s(r);return B(e,"ST_Z",[i(e,o,t)],t)}function pe(e,o,r={}){let t=s(r);return B(e,"ST_M",[i(e,o,t)],t)}function Ee(e){return{asGeoJSON:(...o)=>h(e,...o),geomFromGeoJSON:(...o)=>x(e,...o),geomFromText:(...o)=>k(e,...o),area:(...o)=>W(e,...o),asText:(...o)=>g(e,...o),boundary:(...o)=>_(e,...o),buffer:(...o)=>v(e,...o),centroid:(...o)=>C(e,...o),contains:(...o)=>N(e,...o),covers:(...o)=>w(e,...o),crosses:(...o)=>J(e,...o),dWithin:(...o)=>I(e,...o),difference:(...o)=>F(e,...o),disjoint:(...o)=>V(e,...o),distance:(...o)=>A(e,...o),distanceSphere:(...o)=>j(e,...o),equals:(...o)=>z(e,...o),expand:(...o)=>q(e,...o),geoHash:(...o)=>K(e,...o),intersection:(...o)=>M(e,...o),intersects:(...o)=>H(e,...o),isValid:(...o)=>$(e,...o),makeValid:(...o)=>U(e,...o),maxDistance:(...o)=>X(e,...o),overlaps:(...o)=>Y(e,...o),srid:(...o)=>Z(e,...o),scale:(...o)=>L(e,...o),segmentize:(...o)=>Q(e,...o),setSRID:(...o)=>b(e,...o),simplify:(...o)=>ee(e,...o),simplifyPreserveTopology:(...o)=>oe(e,...o),transform:(...o)=>te(e,...o),translate:(...o)=>re(e,...o),union:(...o)=>ne(e,...o),within:(...o)=>ie(e,...o),x:(...o)=>se(e,...o),y:(...o)=>Be(e,...o),z:(...o)=>ae(e,...o),m:(...o)=>pe(e,...o)}}var T={validate:!0,additionalParameters:[]};function Se(e){T={...T,...e}}0&&(module.exports={area,asGeoJSON,asText,boundary,buffer,centroid,contains,covers,crosses,dWithin,defaultOptions,difference,disjoint,distance,distanceSphere,equals,expand,geoHash,geomFromGeoJSON,geomFromText,intersection,intersects,isValid,m,makeValid,maxDistance,overlaps,scale,segmentize,setDefaultOptions,setSRID,simplify,simplifyPreserveTopology,srid,stf,transform,translate,union,within,x,y,z});
